{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/todo","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"todo\"\n  }, \"todo\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"how \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/tomcat\",\n    \"title\": \"tomcat\"\n  }, \"[[tomcat]]\"), \" works internally?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"dispatcher servlet what it is and its lifecycle\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"what is @Service annotation in [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/5bd5503eff11e9ddacc09c0d244ff913/spring.md\",\n    \"title\": \"spring\"\n  }, \"spring\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"what's JMX\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"play with [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/9e59a0aa10aec0125b5e25615a2d44e6/actuator.md\",\n    \"title\": \"actuator\"\n  }, \"actuator\"), \"] and get insights into app environment\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"what's [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/db6a5df27a60484acb2dcf26f336ca0a/lombok.md\",\n    \"title\": \"lombok\"\n  }, \"lombok\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"docker setup to run databases with spring apps\")));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"spring\"\n  }, \"spring\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"tenets of Spring boot\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"dependency management\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"auto-configuration\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"simple deployment - I know k8 and docker, heh\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"main annotations\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/@SpringBootApplication\",\n    \"title\": \"@SpringBootApplication\"\n  }, \"[[@SpringBootApplication]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/@Component\",\n    \"title\": \"@Component\"\n  }, \"[[@Component]]\"), \"\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/REST\",\n    \"title\": \"REST\"\n  }, \"[[REST]]\"), \" is the way stuff works now\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"#spring bean - is something that's created by Spring and its lifecycle is managed from within the Spring framework - user never specifies it's creation or GC #confirm\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"wow you can create an api by just doing this\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"@RestController\\nclass ProductService {\\n    private List<Product> products = new ArrayList<Product>();\\n    public ProductService() {\\n        products.addAll(List.of(\\n            new Product(\\\"1\\\", \\\"potato\\\"),\\n            new Product(\\\"2\\\", \\\"onions\\\"),\\n            new Product(\\\"3\\\", \\\"chips\\\"),\\n            new Product(\\\"4\\\", \\\"fruits\\\")\\n        ));\\n    }\\n\\n    @GetMapping(value = \\\"/products\\\")\\n    Iterable<Product> getProducts() {\\n        return products;\\n    }\\n}\\n\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"you can use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Optional<type>\"), \" as the return param for an api if the value can be empty\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"@GetMapping(value = \\\"/products/{id}\\\")\\n    Optional<Product> getProductById(@PathVariable String id) {\\n        for(Product p: products) {\\n            if(p.getId() == id) return Optional.of(p);\\n        }\\n\\n        return Optional.empty();\\n    }\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"java == operator tries to equate the references instead of the values - yikes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".equals()\"), \" method to check on values\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/1fae4860a4c9c59d75f475464e614daa/data-access.md\",\n    \"title\": \"data-access\"\n  }, \"data-access\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/@Autowired\",\n    \"title\": \"@Autowired\"\n  }, \"[[@Autowired]]\"), \" is not needed if there's a single constructor\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to do run some code at the start of application start you can do by three ways\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"annotate a class with \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/@Component\",\n    \"title\": \"@Component\"\n  }, \"[[@Component]]\"), \" and create a method with @PostConstruct simple\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/CommandLineRunner\",\n    \"title\": \"CommandLineRunner\"\n  }, \"[[CommandLineRunner]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"or use \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/ApplicationRunner\",\n    \"title\": \"ApplicationRunner\"\n  }, \"[[ApplicationRunner]]\"), \"\")))), mdx(\"h1\", {\n    \"id\": \"configuration\"\n  }, \"configuration\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"ways we can environmentify the application\")), mdx(\"h3\", {\n    \"id\": \"applicationproperties\"\n  }, \"application.properties\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"by default is present in the maven flavoured codebase\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can be used using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@Value\"), \" with some expression language to get the value\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"an example showing reading value from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"application.properties\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"\\n@RestController\\nclass ConfigParamsController {\\n  @Value(\\\"${environment}\\\")\\n  private String environment;\\n\\n  @GetMapping(\\\"/environment\\\")\\n  String getEnvironment() {\\n    return environment;\\n  }\\n}\\n\\n\")), mdx(\"h3\", {\n    \"id\": \"configurationproperties\"\n  }, \"@ConfigurationProperties\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"b0f4e4bc-f90e-5c3e-a698-743635f92e17","fields":{"slug":"/spring","title":"spring"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"actuator\"\n  }, \"actuator\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"4a90b403-bd46-5f4d-afee-15a912df7bac","fields":{"slug":"/actuator","title":"actuator"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"lombok\"\n  }, \"lombok\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"it gives annotations to make life easier like getters and setters\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"it is a compile time code generator - more like babel in frontend world which changes the code during bundling process\")), mdx(\"h2\", {\n    \"id\": \"compile-time-generation---how-is-it-done\"\n  }, \"compile time generation - how is it done?\"), mdx(\"h2\", {\n    \"id\": \"annotations\"\n  }, \"annotations\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@Data\"), \": creates setters, getters, hashCode and toString methods\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@NoArgsConstructor\"), \": creates exactly that, but creating manually would be easier though I guess\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"fd2c04df-6b62-5962-a832-f05907059e2b","fields":{"slug":"/lombok","title":"lombok"}}}],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"welcome-to-my-backend-learning-path\"\n  }, \"welcome to my backend learning path\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"h2\", {\n    parentName: \"li\",\n    \"id\": \"list-of-things-to-be-learned-todo\"\n  }, \"list of things to be learned: [\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"todo\",\n    \"title\": \"todo\"\n  }, \"todo\"), \"]\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"h2\", {\n    parentName: \"li\",\n    \"id\": \"books-readreading-books\"\n  }, \"books read/reading [\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"books\",\n    \"title\": \"books\"\n  }, \"books\"), \"]\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"h2\", {\n    parentName: \"li\",\n    \"id\": \"case-study-to-be-done\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"case-study\",\n    \"title\": \"case-study\"\n  }, \"case-study\"), \"] to be done\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"h2\", {\n    parentName: \"li\",\n    \"id\": \"doubts\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"doubts\",\n    \"title\": \"doubts\"\n  }, \"doubts\"), \"]\"))), mdx(\"h2\", {\n    \"id\": \"parent-level-links-to-topics\"\n  }, \"parent level links to topics\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"spring\",\n    \"title\": \"spring\"\n  }, \"spring\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"java\",\n    \"title\": \"java\"\n  }, \"java\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"go\",\n    \"title\": \"go\"\n  }, \"go\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"dropwizard\",\n    \"title\": \"dropwizard\"\n  }, \"dropwizard\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"guice\",\n    \"title\": \"guice\"\n  }, \"guice\"), \"]\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"dc1779ab-12d6-51b5-8a40-3e1c955cdfa7","fields":{"slug":"/index","title":"welcome to my backend learning path"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"redistemplate\"\n  }, \"RedisTemplate\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to play and auto-configure the Redis with your app\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"no-code needed if only \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"String\"), \" values in your app\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"(class)                   (interface)\\nRedisAccessor ----------- RedisOperations\\n                   |      this contains the\\n                   |      interfaces, dummy contracts needed\\n                   |      to interact with Redis\\n                   |\\n                   \\u2193\\n                (class)\\n              RedisTemplate\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"sample java code for using spring redis operations\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\\nimport org.springframework.data.redis.core.RedisOperations;\\nimport org.springframework.data.redis.core.RedisTemplate;\\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\\n@Bean\\n  public RedisOperations<String, Aircraft>\\n  redisOperations(RedisConnectionFactory factory) {\\n      // custom serializer from jackson to json\\n      Jackson2JsonRedisSerializer<Aircraft> serializer =\\n              new Jackson2JsonRedisSerializer<>(Aircraft.class);\\n\\n      RedisTemplate<String, Aircraft> template = new RedisTemplate<>();\\n      // giving RedisTemplate some mandatory params\\n      // 1. redis connection factory - maybe to optimise connection pooling?\\n      // 2. serializer that we just instantiated above\\n      // 3. not sure atm\\n      template.setConnectionFactory(factory);\\n      template.setDefaultSerializer(serializer);\\n      template.setKeySerializer(new StringRedisSerializer());\\n\\n      return template;\\n  }\\n\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/0b811d93a26287cedb5f03d65ccf08c4/todo.md\",\n    \"title\": \"todo\"\n  }, \"todo\"), \"] understand 3rd argument to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"template\"), \" as to why a new key serializer needs to be passed in?\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"1aa8f89a-39d5-5de4-ab2f-ca20717fbb45","fields":{"slug":"/redistemplate","title":"RedisTemplate"}}}]},"fields":{"slug":"/todo","title":"todo"}}},"pageContext":{"id":"92ad779c-a196-5f71-ba4c-07f4fc4ddf41"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}