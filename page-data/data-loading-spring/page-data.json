{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/data-loading-spring","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"data-loading-spring\"\n  }, \"data-loading-spring\"), mdx(\"p\", null, \"two ways to do it\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"using plain ol' \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sql\"), \" scripts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"using inbuilt [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/2bd5b5bc96bc34ceafc71c7d08fef0c7/repository.md\",\n    \"title\": \"repository\"\n  }, \"repository\"), \"] support\")), mdx(\"h2\", {\n    \"id\": \"sql\"\n  }, \"sql\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"make sure you've these scripts which create the database and load some data using insert statements\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/5bd5503eff11e9ddacc09c0d244ff913/spring.md\",\n    \"title\": \"spring\"\n  }, \"spring\"), \"] automatically looks for different file names; check it out \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.spring.io/spring-boot/docs/2.1.x/reference/html/howto-database-initialization.html\"\n  }, \"here\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"also make these properties false so as to prevent the default jpa behaviour of spring\")), mdx(\"h3\", {\n    \"id\": \"opinions\"\n  }, \"opinions\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"I for one love this way as I've the complete control on what's going and not\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"I can have these files for dev and qa environment and make it easier to have a base set of data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"it's easy to export a dump from the original prod database and check-in the repo with a trimmed version\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"awesome, no need to manually write the DDL and DML queries\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"but it might be a problem if db changes - which is NEVER I assume, as it would be foolhardy to develop on one and deploy on another\")), mdx(\"h2\", {\n    \"id\": \"using-repository-in-an-component-bean\"\n  }, \"using repository in an @Component bean\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"add a method and annotate it as @PostConstruct which will execute on startup\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"then autowire the repository and start adding objects\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"spring.datasource.initialization-mode=always\\nspring.jpa.hibernate.ddl-auto=none\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"repository\"\n  }, \"repository\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"abstraction over database boilerplate code in [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/5bd5503eff11e9ddacc09c0d244ff913/spring.md\",\n    \"title\": \"spring\"\n  }, \"spring\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"auto detects the database driver as found in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"pom.xml\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"only need to create a factory\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/CrudRepository\",\n    \"title\": \"CrudRepository\"\n  }, \"[[CrudRepository]]\"), \" as its the highest level of abstraction\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"it builds on top of \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Templates\",\n    \"title\": \"Templates\"\n  }, \"[[Templates]]\"), \" and is an higher abstraction level when seen from the point of view of [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/a1c7446596c1d331b111a4106a5210ca/spring-data.md\",\n    \"title\": \"spring-data\"\n  }, \"spring-data\"), \"]\")), mdx(\"h1\", {\n    \"id\": \"repository-interface\"\n  }, \"Repository interface\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/a1c7446596c1d331b111a4106a5210ca/spring-data.md\",\n    \"title\": \"spring-data\"\n  }, \"spring-data\"), \"]\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Repository\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JPARepository\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"MongoRepository\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CrudRepository\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ReactiveCrudRepository\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"PagingAndSortingRepository\")))))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"all these interfaces define commonly used methods like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"findAll\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"findById\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"delete\"))), mdx(\"h1\", {\n    \"id\": \"setup\"\n  }, \"setup\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"first up is to define a repository so that [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/5bd5503eff11e9ddacc09c0d244ff913/spring.md\",\n    \"title\": \"spring\"\n  }, \"spring\"), \"] knows you're using one\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"definition is straightforward by declaring an interface extending \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"CrudRepository\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"public interface SomeRepository extends CrudRepository<Domain, Long> {}\\n\")), mdx(\"h2\", {\n    \"id\": \"redis-with-repository\"\n  }, \"redis with repository\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"if using [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/2bd5b5bc96bc34ceafc71c7d08fef0c7/repository.md\",\n    \"title\": \"repository\"\n  }, \"repository\"), \"] to interact with [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/9cf50155bee1a06e54acac8677bff2dc/redis.md\",\n    \"title\": \"redis\"\n  }, \"redis\"), \"] you don't need to use [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/3c398520ccbd068319218a6c008be2fa/redistemplate.md\",\n    \"title\": \"RedisTemplate\"\n  }, \"redistemplate\"), \"] and simplify the code\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"so it basically saves you from\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"providing the serializers for the redis or datastore\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"connection factory which although can be autowired from the spring IoC if it's in the classpath\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"no need to worry about the complex type conversions like manually providing setters/getters etc\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"just add \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/@RedisHash\",\n    \"title\": \"@RedisHash\"\n  }, \"[[@RedisHash]]\"), \"\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"46b11492-63bc-5307-89ea-8bb9398defa7","fields":{"slug":"/repository","title":"repository"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"spring\"\n  }, \"spring\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"tenets of Spring boot\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"dependency management\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"auto-configuration\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"simple deployment - I know k8 and docker, heh\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"main annotations\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/@SpringBootApplication\",\n    \"title\": \"@SpringBootApplication\"\n  }, \"[[@SpringBootApplication]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/@Component\",\n    \"title\": \"@Component\"\n  }, \"[[@Component]]\"), \"\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/REST\",\n    \"title\": \"REST\"\n  }, \"[[REST]]\"), \" is the way stuff works now\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"#spring bean - is something that's created by Spring and its lifecycle is managed from within the Spring framework - user never specifies it's creation or GC #confirm\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"wow you can create an api by just doing this\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"@RestController\\nclass ProductService {\\n    private List<Product> products = new ArrayList<Product>();\\n    public ProductService() {\\n        products.addAll(List.of(\\n            new Product(\\\"1\\\", \\\"potato\\\"),\\n            new Product(\\\"2\\\", \\\"onions\\\"),\\n            new Product(\\\"3\\\", \\\"chips\\\"),\\n            new Product(\\\"4\\\", \\\"fruits\\\")\\n        ));\\n    }\\n\\n    @GetMapping(value = \\\"/products\\\")\\n    Iterable<Product> getProducts() {\\n        return products;\\n    }\\n}\\n\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"you can use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Optional<type>\"), \" as the return param for an api if the value can be empty\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"@GetMapping(value = \\\"/products/{id}\\\")\\n    Optional<Product> getProductById(@PathVariable String id) {\\n        for(Product p: products) {\\n            if(p.getId() == id) return Optional.of(p);\\n        }\\n\\n        return Optional.empty();\\n    }\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"java == operator tries to equate the references instead of the values - yikes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".equals()\"), \" method to check on values\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/1fae4860a4c9c59d75f475464e614daa/data-access.md\",\n    \"title\": \"data-access\"\n  }, \"data-access\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/@Autowired\",\n    \"title\": \"@Autowired\"\n  }, \"[[@Autowired]]\"), \" is not needed if there's a single constructor\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to do run some code at the start of application start you can do by three ways\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"annotate a class with \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/@Component\",\n    \"title\": \"@Component\"\n  }, \"[[@Component]]\"), \" and create a method with @PostConstruct simple\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/CommandLineRunner\",\n    \"title\": \"CommandLineRunner\"\n  }, \"[[CommandLineRunner]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"or use \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/ApplicationRunner\",\n    \"title\": \"ApplicationRunner\"\n  }, \"[[ApplicationRunner]]\"), \"\")))), mdx(\"h1\", {\n    \"id\": \"configuration\"\n  }, \"configuration\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"ways we can environmentify the application\")), mdx(\"h3\", {\n    \"id\": \"applicationproperties\"\n  }, \"application.properties\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"by default is present in the maven flavoured codebase\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can be used using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@Value\"), \" with some expression language to get the value\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"an example showing reading value from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"application.properties\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"\\n@RestController\\nclass ConfigParamsController {\\n  @Value(\\\"${environment}\\\")\\n  private String environment;\\n\\n  @GetMapping(\\\"/environment\\\")\\n  String getEnvironment() {\\n    return environment;\\n  }\\n}\\n\\n\")), mdx(\"h3\", {\n    \"id\": \"configurationproperties\"\n  }, \"@ConfigurationProperties\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"b0f4e4bc-f90e-5c3e-a698-743635f92e17","fields":{"slug":"/spring","title":"spring"}}}],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"data-access\"\n  }, \"data-access\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"entities that are persisted are called \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"domain\"), \" objects, so I'll now place them under domain package\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"also another way to know if a class is a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"domain\"), \" class or not is that if it needs \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/@Entity\",\n    \"title\": \"@Entity\"\n  }, \"[[@Entity]]\"), \" annotation then it is\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"all stuff related to data access and interfacing over dbs is called a [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/2bd5b5bc96bc34ceafc71c7d08fef0c7/repository.md\",\n    \"title\": \"repository\"\n  }, \"repository\"), \"] in [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/5bd5503eff11e9ddacc09c0d244ff913/spring.md\",\n    \"title\": \"spring\"\n  }, \"spring\"), \"]\")), mdx(\"h2\", {\n    \"id\": \"how-to-load-data-into-the-application\"\n  }, \"how to load data into the application?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"data loading in [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/5bd5503eff11e9ddacc09c0d244ff913/spring.md\",\n    \"title\": \"spring\"\n  }, \"spring\"), \"] is covered [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/8228f4682b325d202f7206602f8d86ea/data-loading-spring.md\",\n    \"title\": \"data-loading-spring\"\n  }, \"data-loading-spring\"), \"]\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"2b034488-d5f0-57cf-804f-e78f2c4efed4","fields":{"slug":"/data-access","title":"data-access"}}}]},"fields":{"slug":"/data-loading-spring","title":"data-loading-spring"}}},"pageContext":{"id":"6aeff51f-008b-5105-a9e8-35f8047e59a2"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}