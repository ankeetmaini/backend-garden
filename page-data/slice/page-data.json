{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/slice","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"slice\"\n  }, \"slice\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"concat slices?? just like JavaScript's spread operator but the three dots come after instead of before as shown in example\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\"\n  }, \"  var x = []int{2, 3, 5}\\n    var y = []int{20, 30, 50}\\n    x = append(x, y...)\\n\")), mdx(\"h2\", {\n    \"id\": \"how-they-are-stored-internally\"\n  }, \"how they are stored internally\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"when you use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"append\"), \" the slice is not modified but a new slice is created and the older values are copied over to the new slice\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/397dbf9ee88d935d839cdb42ba2f2dda/go.md\",\n    \"title\": \"go\"\n  }, \"go\"), \"] is pass by value not reference - so any params that are passed to functions are copied inside that's why you need to assign the value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"append\"), \" back to the same variable\")), mdx(\"h2\", {\n    \"id\": \"capacity\"\n  }, \"capacity\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"slice uses contiguous memory cells and if you increase the size it has to check if the memory locations are available or not\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"so it's not very efficient to increase and allocate on the go - wasted cpu cycles in copying older values to the newer array\")), mdx(\"h2\", {\n    \"id\": \"make\"\n  }, \"make\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"so if you know the size in advance use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"make\"), \" to create a slice of the recommended size\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\"\n  }, \"x := make([]int, 5, 10)\\n// type, length, capacity\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"never specify the capacity lesser than length cuz now you know what's what\")));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"go\"\n  }, \"go\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"it's a compiled language\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"go run <filename.go>\"), \" when trying to run the code as a script\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"go build <filename.go>\"), \" when you want to build a binary - so cool\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"no runtime needed for the package to be deployed, isn't it the best?\")), mdx(\"p\", null, \"this makes sure you don't have to install something else for your code to run, the runtime or virtual machine is built in - the code will never be out of sync of the place it's deployed and will always be compatible - imagine using node lower version for es6 features - booom, or java 8 in jvm 6\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"go tools and 3rd party libs are managed differently than JavaScript, there's no central registry. Everything is done via git repositories\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"go install github.com/rakyll/hey@latest\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"what it does behind the scenes is fetch the code, build it and add it to $GOPATH/bin, since it's a binary nothing to install, just use it as a command\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/b89cd178bf2bca0601329e37d840e124/doubts.md\",\n    \"title\": \"doubts\"\n  }, \"doubts\"), \"] how would it work inside the program?\")))), mdx(\"h3\", {\n    \"id\": \"formatting-linting\"\n  }, \"formatting, linting\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"go comes with a formatter by default - \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"go fmt <filename.go>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"no prettier required :P\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"golint .\"), \" works and finds lint mistakes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"go vet <filename.go>\"), \" finds unused vars etc\")), mdx(\"h3\", {\n    \"id\": \"build\"\n  }, \"build\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/397dbf9ee88d935d839cdb42ba2f2dda/go.md\",\n    \"title\": \"go\"\n  }, \"go\"), \"] uses [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/236aeaca636edcab1e48e0dd96be406a/make.md\",\n    \"title\": \"make\"\n  }, \"make\"), \"] to build the projects\")), mdx(\"h2\", {\n    \"id\": \"types\"\n  }, \"types\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"each variable which is defined but not initialized will have a value \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"0\"), \" unlike \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"undefined\"), \" in JavaScript\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"const\"), \" can only be used for literals, we can't say in code that result of an operations of two variables is const\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-golang\"\n  }, \"const x = 10.3\\n// valid as x is a literal\\nconst y = math.Remainder(x, 2)\\n\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"error: math.Remainder(x, 2) (value of type float64) is not constantcompilerInvalidConstInit\")), mdx(\"h3\", {\n    \"id\": \"scope\"\n  }, \"scope\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"go variables are block scope, vars declared outside the function at the package level are available throughout\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"do they shadow? [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/b89cd178bf2bca0601329e37d840e124/doubts.md\",\n    \"title\": \"doubts\"\n  }, \"doubts\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use shorter variable names if the scope is short like a function but if the variable is added in the package scope then give full name as it should be clear what it's doing\")), mdx(\"h3\", {\n    \"id\": \"arrays-in-go\"\n  }, \"arrays in Go\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"they are not that greatly used, whyyy?\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"since go is a strongly typed language and the type of the array contains the length of the array too\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"which makes it difficult to work with as we can't write code or functions which can operate on any array or perform operations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"also length needs to be specified while creating an array; fixed length not variable\")))), mdx(\"h3\", {\n    \"id\": \"slices\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"/backend-garden/817984f3f9e100b64f3dceff0148f4ae/slice.md\",\n    \"title\": \"slice\"\n  }, \"slice\"), \"]s\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"they are what arrays are in other languages\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"you can grow them decrease them and when creating you don't have to specify the sizes\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\"\n  }, \"package main\\n\\nimport (\\n    \\\"fmt\\\"\\n)\\n\\nfunc main() {\\n    var x = []int{2, 3, 5}\\n\\n    x = append(x, 100, 200)\\n    fmt.Println(len(x))\\n}\\n\\n\")), mdx(\"h2\", {\n    \"id\": \"undefined-in-javascript-but-nil-in-go\"\n  }, \"undefined in JavaScript but \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"nil\"), \" in Go\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"nil means there's no value in the slice\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"66ccd2c6-f9ab-5c20-9350-8a79b22f3245","fields":{"slug":"/go","title":"go"}}}],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"go\"\n  }, \"go\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"it's a compiled language\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"go run <filename.go>\"), \" when trying to run the code as a script\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"go build <filename.go>\"), \" when you want to build a binary - so cool\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"no runtime needed for the package to be deployed, isn't it the best?\")), mdx(\"p\", null, \"this makes sure you don't have to install something else for your code to run, the runtime or virtual machine is built in - the code will never be out of sync of the place it's deployed and will always be compatible - imagine using node lower version for es6 features - booom, or java 8 in jvm 6\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"go tools and 3rd party libs are managed differently than JavaScript, there's no central registry. Everything is done via git repositories\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"go install github.com/rakyll/hey@latest\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"what it does behind the scenes is fetch the code, build it and add it to $GOPATH/bin, since it's a binary nothing to install, just use it as a command\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/b89cd178bf2bca0601329e37d840e124/doubts.md\",\n    \"title\": \"doubts\"\n  }, \"doubts\"), \"] how would it work inside the program?\")))), mdx(\"h3\", {\n    \"id\": \"formatting-linting\"\n  }, \"formatting, linting\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"go comes with a formatter by default - \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"go fmt <filename.go>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"no prettier required :P\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"golint .\"), \" works and finds lint mistakes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"go vet <filename.go>\"), \" finds unused vars etc\")), mdx(\"h3\", {\n    \"id\": \"build\"\n  }, \"build\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/397dbf9ee88d935d839cdb42ba2f2dda/go.md\",\n    \"title\": \"go\"\n  }, \"go\"), \"] uses [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/236aeaca636edcab1e48e0dd96be406a/make.md\",\n    \"title\": \"make\"\n  }, \"make\"), \"] to build the projects\")), mdx(\"h2\", {\n    \"id\": \"types\"\n  }, \"types\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"each variable which is defined but not initialized will have a value \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"0\"), \" unlike \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"undefined\"), \" in JavaScript\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"const\"), \" can only be used for literals, we can't say in code that result of an operations of two variables is const\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-golang\"\n  }, \"const x = 10.3\\n// valid as x is a literal\\nconst y = math.Remainder(x, 2)\\n\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"error: math.Remainder(x, 2) (value of type float64) is not constantcompilerInvalidConstInit\")), mdx(\"h3\", {\n    \"id\": \"scope\"\n  }, \"scope\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"go variables are block scope, vars declared outside the function at the package level are available throughout\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"do they shadow? [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/backend-garden/b89cd178bf2bca0601329e37d840e124/doubts.md\",\n    \"title\": \"doubts\"\n  }, \"doubts\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use shorter variable names if the scope is short like a function but if the variable is added in the package scope then give full name as it should be clear what it's doing\")), mdx(\"h3\", {\n    \"id\": \"arrays-in-go\"\n  }, \"arrays in Go\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"they are not that greatly used, whyyy?\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"since go is a strongly typed language and the type of the array contains the length of the array too\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"which makes it difficult to work with as we can't write code or functions which can operate on any array or perform operations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"also length needs to be specified while creating an array; fixed length not variable\")))), mdx(\"h3\", {\n    \"id\": \"slices\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"/backend-garden/817984f3f9e100b64f3dceff0148f4ae/slice.md\",\n    \"title\": \"slice\"\n  }, \"slice\"), \"]s\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"they are what arrays are in other languages\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"you can grow them decrease them and when creating you don't have to specify the sizes\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-go\"\n  }, \"package main\\n\\nimport (\\n    \\\"fmt\\\"\\n)\\n\\nfunc main() {\\n    var x = []int{2, 3, 5}\\n\\n    x = append(x, 100, 200)\\n    fmt.Println(len(x))\\n}\\n\\n\")), mdx(\"h2\", {\n    \"id\": \"undefined-in-javascript-but-nil-in-go\"\n  }, \"undefined in JavaScript but \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"nil\"), \" in Go\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"nil means there's no value in the slice\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"66ccd2c6-f9ab-5c20-9350-8a79b22f3245","fields":{"slug":"/go","title":"go"}}}]},"fields":{"slug":"/slice","title":"slice"}}},"pageContext":{"id":"adcef847-ec6f-5f4f-8c01-d62005206026"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}